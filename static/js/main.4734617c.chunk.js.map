{"version":3,"sources":["ImageTile.js","PictureModal.js","App.js","serviceWorker.js","index.js"],"names":["ImageTile","props","url","concat","src","react_default","a","createElement","Grid","item","xs","Card","className","raised","CardContent","alt","onClick","handleClickOpen","PictureModal","onClose","other","Object","objectWithoutProperties","handleClose","Dialog","assign","fullScreen","DialogTitle","TextField","required","id","label","margin","variant","Button","color","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","currentPicture","setState","open","state","files","fetch","then","response","text","textFile","split","filter","file","includes","_this2","Paper","container","spacing","map","ImageTile_ImageTile","key","PictureModal_PictureModal","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4734617c.chunk.js","sourcesContent":["import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport './ImageTile.css';\r\n\r\nexport function ImageTile(props) {\r\n  const url = `assets/${props.src}`;\r\n\r\n  const handleClickOpen = () => props.handleClickOpen(url);\r\n\r\n  return (\r\n    <Grid item xs={4}>\r\n      <Card className=\"img-tile\" raised={true}>\r\n        <CardContent className=\"card-content\">\r\n          <img src={url} alt=\"lolcat\" onClick={handleClickOpen} />\r\n        </CardContent>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport './PictureModal.css';\r\n\r\nexport function PictureModal(props) {\r\n  const { onClose, url, ...other } = props;\r\n\r\n  function handleClose() {\r\n    onClose();\r\n  }\r\n\r\n  return (\r\n    <Dialog\r\n      onClose={handleClose}\r\n      className=\"picture-modal\"\r\n      fullScreen={true}\r\n      {...other}\r\n    >\r\n      <DialogTitle className=\"modal-title\">{url}</DialogTitle>\r\n      <div className=\"modal-img-container\">\r\n        <img src={url} alt=\"lolcat\" />\r\n      </div>\r\n      <div className=\"email-container\">\r\n        <TextField\r\n          required\r\n          id=\"standard-required\"\r\n          label=\"e-mail\"\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          className=\"email-input\"\r\n        />\r\n        <Button variant=\"contained\" color=\"primary\" className=\"button\">\r\n          Send\r\n        </Button>\r\n        <Button variant=\"contained\" className=\"button\" onClick={handleClose}>\r\n          Cancel\r\n        </Button>\r\n      </div>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { ImageTile } from './ImageTile';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport { PictureModal } from './PictureModal';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = { files: [], open: false, currentPicture: '' };\n    fetch('assets/dir.txt')\n      .then(response => response.text())\n      .then(textFile => textFile.split(/\\n/))\n      .then(files => files.filter(file => file.includes('.jp')))\n      .then(files => this.setState({ files }));\n  }\n\n  handleClickOpen = currentPicture => {\n    this.setState({ open: true, currentPicture });\n  };\n\n  onClose = () => {\n    this.setState({ open: false });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Paper>\n          <Grid container spacing={3}>\n            {this.state.files.map(file => (\n              <ImageTile\n                src={file}\n                key={file}\n                handleClickOpen={this.handleClickOpen}\n              />\n            ))}\n          </Grid>\n        </Paper>\n        <PictureModal\n          open={this.state.open}\n          url={this.state.currentPicture}\n          onClose={this.onClose}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}